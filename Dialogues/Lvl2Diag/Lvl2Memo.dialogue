~ Memo1
set PlayerData.can_move = false
You: Ughhh this no matter how many times I experience it I just can't get used to these teleporting shenanigans.
Welcome to Deep Lab. By stepping inside, you've seamlessly integrated into our collective. To sustain our dominance, it's essential that our minds remain exceptionally sharp. Our facility is subtly crafted to continuously engage and challenge your cognitive abilities, ensuring your brain is always in peak condition. After all, a perpetually active mind stays free from rust.
You: huh? man I'm feeling bad omen because of this.
set PlayerData.can_move = true
=> END 

~ Memo2
set PlayerData.can_move = false
'Recording - AL-1S\:'\nHello AL-1S, this is AL-1S in case of memory deletion I've made a guide on how to navigate the facility.
Now you might have noticed there is a bunch of teleport modules on this part of the facility; based on what the Facility AI told me it's based on Selection Structure. There is more information on the computer if you're having a hard time navigating.
You: hmm. I should probably check the logs before going inside a TP module.
set PlayerData.can_move = true
=> END

~ Memo3
set PlayerData.can_move = false
Hello Researcher! You know even after becoming a researcher here you must know the basic history within this facility... Did you know this facility is made by 'James Gosling' one of our founding fathers! Responsible for the creation of the language we mainly use which is 'JAVA' and...
You: Skipppppp. I know a bunch of this information already I need the important bits. And this is already thought to use jeez...
Object-Oriented: Java represents everything as objects, which encapsulate data and behavior.
Platform Independent: Java programs are compiled into bytecode, which can run on any machine with a Java runtime environment (JRE), making them platform independent. This differs from C or C++, where programs are OS-specific.
Multithreaded: Java supports multiple threads, allowing applications to perform various tasks simultaneously.
High-Performance: While interpreted, Java uses a just-in-time compiler to enhance performance.
OS Architecture-Neutral: Java generates OS-independent bytecode.
Robust: Java is reliable and robust.
You: huh?? how is this supposed to help me?
set PlayerData.can_move = true
=> END

~ Memo4
set PlayerData.can_move = false
Java does not support multiple threads and can only perform one task at a time.
You: I wonder if I can find clues regarding these. 
set PlayerData.can_move = true
=> END

~ Memo5
set PlayerData.can_move = false
 Java programs are compiled into bytecode, which can run on any machine with a Java runtime environment (JRE), making them platform independent.
You: I wonder if I can find clues regarding these.
set PlayerData.can_move = true
=> END

~ Memo6
set PlayerData.can_move = false
Java programs are OS-specific, similar to C or C++, and cannot run on different operating systems without modification.
You: I wonder if I can find clues regarding these.
set PlayerData.can_move = true
=> END

~ Memo7
set PlayerData.can_move = false
'Recording - AL-1S\:' \nHello AL-1S speaking! Have you noticed a pattern? This whole place is implemented to have a Repetition/Iteration Structure. Repeating through the Teleportation Modules whenever a condition is not met and iterating through multiple rooms to find the right condition to escape is a fine example!!
You: Wait do I have to go through another section like this??
But now that's done I'll be testing you knowledge, as you know we are a facility of JAVA lovers we have to know if you have the necessary knowledge for the things we love so we'll test you!
(PICTURE)
Here is a picture of a basic code snippet! Do what you can with that information.
You: ??
set PlayerData.can_move = true
=> END

~ Memo8
set PlayerData.can_move = false
(PICTURE)
Here is a code snippet
set PlayerData.can_move = true
=> END 

~ Memo9
set PlayerData.can_move = false
(PICTURE)
Here is a code snippet
set PlayerData.can_move = true
=> END

~ Memo10
set PlayerData.can_move = false
(PICTURE)
Here is a code snippet
set PlayerData.can_move = true
=> END

~ Memo11
set PlayerData.can_move = false
'Recording\: AL-1S' \nYou know these machines here doesn't just need physical repair for them to work they also need to be repaired internally like their programming!! And for that purpose, I'll introduce you to various applications needed when operating JAVA!!
First we have JVM? The Java Virtual Machine (JVM) runs Java bytecodes, which are generated by compiling .java files into .class files. JVM translates these bytecodes into native machine code that the CPU can execute directly.
Then JRE? The Java Runtime Environment (JRE) includes the JVM, Java class libraries, and other components required to run Java applications. It is a superset of the JVM.
Lastly JDK? The Java Development Kit (JDK) includes the JRE and additional development tools for developing, debugging, and monitoring Java applications. It is necessary for Java application development
JRE = JVM + libraries to run Java applications.
JDK = JRE + tools to develop Java applications.\nAnd make sure to remember that you need these when operating on these machines!!
set PlayerData.can_move = true
=> END

~ Memo12
set PlayerData.can_move = false
The Java Development Kit (JDK) is the virtual machine that runs Java bytecodes. It translates bytecode into native machine code, which is a set of instructions that a computer's CPU executes directly.
set PlayerData.can_move = true
=> END

~ Memo13
set PlayerData.can_move = false
The Java Development Kit (JDK) is a superset of the Java Runtime Environment (JRE). It contains everything that the JRE has along with development tools for developing, debugging, and monitoring Java applications. You need the JDK when you need to develop Java applications.
set PlayerData.can_move = true
=> END

~ Memo14
set PlayerData.can_move = false
You: An actual lab? Huh. let's see what we can find here.
(PICTURE)
Proper naming conventions, variable initialization, and appropriate variable types in Java programming enhance code readability, maintainability, collaboration, and error prevention, ensuring the program behaves as expected and is easy for others to understand and maintain. Here is a good naming and variable initialization example!
set PlayerData.can_move = true
=> END

~ Memo15
set PlayerData.can_move = false
(PICTURE)
'Recordind\: AL-1S' \nI always find myself wondering why my coding skills suck even though my entire consciousness is an intricate code altogether, I wonder why that is? 
Anyways Facility AI always told me that my variable initialization and naming conventions are already fine however I always miss setting variable types. So, I'll start noting variable types whenever I can!!
Here is an example of Local Variable in summary they're Local Variable\: Defined inside a method; Only usable within that method; Other methods don't know it exists; Cannot be declared as 'static'. Basically, they only exist in their method!
set PlayerData.can_move = true
=> END

~ Memo16
set PlayerData.can_move = false
(PICTURE)
'Recordind\: AL-1S' \nAnother tip from the great programmer AL-1S!  I remember talking about Local Variable now we're talking about Instance Variable!!
You see, Instance Variable is defined inside a class, but outside any methods; Each instance (object) of the class has its own copy and it's not shared among different instances. In Summary! Instance Variables are unique to each object of a class!
set PlayerData.can_move = true
=> END

~ Memo17
set PlayerData.can_move = false
You: Uuugh, just how many teleport modules does this facility have? Can' they just use stairs for navigating jeez.
You: But to my knowledge this should be the basement of this sector.
set PlayerData.can_move = true
=> END

~ Memo18
set PlayerData.can_move = false
You: Weird there was a lever here, but I don't think I heard any TP modules from disabling, hmmmmm.
You: I wonder what that lever is for?
set PlayerData.can_move = true
=> END

~ Memo19
set PlayerData.can_move = false
(PICTURE)
'Recording\: AL-1S' \nAnother tip from the great programmer AL-1S!  A static variable is a variable that is shared among all instances of a class. It is declared with the static keyword and is allocated memory only once when the class is loaded. You can use this whenever you have a variable that is accessed by every part of your code!!
set PlayerData.can_move = true
=> END

~ Memo20
set PlayerData.can_move = false
(PICTURE)
'Recording\: AL-1S' \nHi! AL-1S The great programmer here! I'm a bit shy to admit here but I've had a bunch of trouble with data type hahahahahaha :> so here's a chart of them. 
And remember differentiating Java data types is important because it helps the computer know how much memory to use and how to handle data efficiently. 
It also prevents errors by ensuring that only compatible data is stored in variables, making the program safer and faster. Using the right data type makes the code easier to understand and maintain. This helps in writing clear, efficient, and reliable programs.
set PlayerData.can_move = true
=> END

~ Memo22
set PlayerData.can_move = false
'Recording\: AL-1S' \nSTOP! Before proceeding please read! Area Ahead Is DANGEROUS! AL-1S if you're reading this, please thread this path carefully a bunch of hostile experimental bugs have occupied this sector. Use the guardrails above for safer navigation.
You: Looks like we'll meet a lot of bugs here eh.
set PlayerData.can_move = true
=> END

~ Memo23
set PlayerData.can_move = false
'Recording\: AL-1S' \nThis place is too dangerous for me, the bugs below are hostile to everyone, even me. This emotion, must be called fear every human is born with however I am an android, why do I exhibit such emotion?
set PlayerData.can_move = true
=> END

~ Memo24
set PlayerData.can_move = false
'R-cor-d-ng\: Pro-fe-so- Ald-in' \nIt's been two days since the facility issued an emergency evacuation, and I'm still here. When the experiments escaped, I had nowhere to go, and I refused to leave my life's work behind. 
It's the only thing I live for! Those higher-ups don’t understand my research. All they wanted was to fill their pockets, but not me. Even if I die here, at least I die knowing I did what I loved.
You: Whoah this guy... I wonder if he ever got out.
You: I can't believe his passion made him do such reckless decision.
You: I too wish I had passion like yours.
set PlayerData.can_move = true
=> END

~ Memo25
set PlayerData.can_move = false
(JAVA BASIC INPUT AND OUTPUT MOD6) \n(Picture)
'Recording\: AL-1S' \nHere's a basic rundown of Java INPUT and OUTPUT. \nFor Input a good example is 'System.in'  This is the standard input stream used to read characters from the keyboard or any other standard input device. It allows the program to take user input.
For Output 'System.out'  This is the standard output stream used to produce the result of a program on an output device, such as the computer screen. It allows the program to display output to the user.
set PlayerData.can_move = true
=> END

~ Memo26
set PlayerData.can_move = false
'Recording\: AL-1S' \nWhy do we import classes? Imagine you're building a house. The house itself represents your program, and each room inside serves a specific purpose. Now, if you need a bathroom in your house to bathe and wash yourself, you have to include it in your plan. 
Similarly, in programming, classes are like rooms in your house—they encapsulate data and behavior. Importing a class is like adding a new room with specific functionalities to your program. It allows you to reuse existing code and access predefined functionalities, making your coding experience more efficient and organized.
You: That's a really nice analogy
set PlayerData.can_move = true
=> END

~ Memo27
set PlayerData.can_move = false
'Recording\: AL-1S' \nThe bugs have retreated for now, seems like they were pre-occupied with something, now is a good time to fix whatever is wrong in this sector. Fortunately, the damage is not bad once I'm done here the TP module should be functional.
You: He mentioned a TP Module! looks like I'm going through the right path after all!
set PlayerData.can_move = true
=> END

~ Memo28
set PlayerData.can_move = false
'Recording\: AL-1S' \nI saw what looked like corpses just earlier, I asked the Facility A.I. for instructions on how to deal with them, I was instructed with disposal, I don't know what I'm feeling, Disgust? If so, why?
set PlayerData.can_move = true
=> END

~ Memo29
set PlayerData.can_move = false
'Recording\: AL-1S' \nEmotions aren't inherent to androids like me but roaming this facility and interacting with no one except the Facility AI has made me experience something. It's a loneliness I can't quite explain.
set PlayerData.can_move = true
=> END

~ Memo30
set PlayerData.can_move = false
(Picture)
'Recording\: AL-1S' \nThere is three way we input data to a code there is the Scanner, InputStreamReader, and BufferedReader. They're all similar in functionalities but different execution, overall, their difference doesn't really matter much but you need to see how they're executed. 
Above is InputStreamReader and BufferedReader example, since they kind of need each other to work. Personally, I just use Scanner Hehe.
You: What a cheeky android.
set PlayerData.can_move = true
=> END

~ Memo31
set PlayerData.can_move = false
(Picture)
You: "Here is an example of Scanner Class usage!". Looks like Scanner is simpler than BufferedReader, no wonder AL-1S displayed such noticeable bias when mentioning it.
set PlayerData.can_move = true
=> END

~ Memo32
set PlayerData.can_move = false
(Picture)
'Recording\: AL-1S' \nAs a part of my programming career I've made a bunch of code snippets that helped me practice with coding with java! Can you guess how it works?
You: Hmm. Judging by how it works it's a random number guessing game.
It's a random number guessing game!!
I used a class called "Random" for the random unit to be chosen! Overall, it's a fun way to use basic input and output in java! And I also used iteration, noticed the "while" function it reads how many attempts you have and if it goes zero its game over! Looks like I can really call myself a programmer now!
You: I'm surprised myself I actually understood it! Maybe reading all those notes did add to my knowledge, looks like even I am learning.
You: Looks like this is the last note, if my calculations are right that TP Module on the right is my way out of this floor, welp only one way to find out.
set PlayerData.can_move = true
=> END